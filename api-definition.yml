openapi: 3.0.2
info:
  title: API Title
  version: "1.0"
servers:
  - url: "https://api.server.test/v1"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    newThread:
      type: object
      required:
        - title
        - description
        - location
      properties:
        title:
          type: string
        description:
          type: string
        type:
          type: string
        authorId:
          description: "if anonymous a number unique to a user in a thread, else the userid"
          type: integer
          format: int32
        anonymous:
          type: boolean
        location:
          $ref: "#/components/schemas/location"
    thread:
      type: object
      allOf:
        - $ref: "#/components/schemas/newThread"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int32
    location:
      type: object
      required:
        - lat
        - lng
      properties:
        lat:
          type: number
          format: float
        lng:
          type: number
          format: float
    newComment:
      type: object
      required:
        - parentId
        - threadId
        - content
      properties:
        parentId:
          type: integer
          format: int64
        authorId:
          description: "if anonymous a number unique to a user in a thread, else the userid"
          type: integer
          format: int64
        threadId:
          type: integer
          format: int64
        anonymous:
          type: boolean
        content:
          type: string
    comment:
      type: object
      allOf:
        - $ref: "#/components/schemas/newComment"
        - type: object
          required:
            - id
            - votes
            - created_at
          properties:
            id:
              type: integer
              format: int64
            upvotes:
              type: integer
              format: int32
            downvotes:
              type: integer
              format: int32
            myvote:
              type: string
              enum: ["none", "downvote", "upvote"]

            created_at:
              type: number
              format: timestamp
    user:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
        banned:
          type: boolean
        banUntil:
          description: Banned until (0 = infinite)
          type: integer
          format: timestamp
        private:
          type: boolean
        admin:
          type: boolean
        joined_at:
          type: integer
          format: timestamp
    newReport:
      type: object
      required:
        - reason
        - comment
      properties:
        comment:
          $ref: "#/components/schemas/comment"
        userId:
          type: integer
          format: int64
        reason:
          type: string
    report:
      type: object
      allOf:
        - $ref: "#/components/schemas/newReport"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
            handled:
              type: boolean
    login:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
          format: password
    register:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
          format: password
        private:
          type: boolean
paths:
  /threads:
    get:
      summary: Returns threads in a radius around the given position
      parameters:
        - name: lat
          required: true
          in: query
          schema:
            type: number
            format: float
        - name: lng
          required: true
          in: query
          schema:
            type: number
            format: float
        - name: radius
          required: true
          in: query
          schema:
            type: number
            format: float
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/thread"
  "/thread/{threadId}":
    get:
      summary: Returns thread with given id
      parameters:
        - name: threadId
          required: true
          in: path
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/thread"
        "401":
          description: unauthorized
        "404":
          description: not found
  /thread/:
    post:
      summary: Create new thread
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newThread"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/thread"
        "401":
          description: unauthorized
  "/thread/{threadId}/comments":
    get:
      summary: Get comments in thread
      parameters:
        - name: threadId
          required: true
          in: path
          schema:
            type: integer
            format: int64
        - name: levels
          required: false
          description: Maximum level of subcomments
          in: query
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/comment"
    post:
      summary: Create new top level comment
      security:
        - bearerAuth: []
      parameters:
        - name: threadId
          required: true
          in: path
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newComment"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/comment"
        default:
          description: failure
  "/thread/{threadId}/comments/{commentId}":
    get:
      summary: Get single comment
      parameters:
        - name: threadId
          required: true
          in: path
          schema:
            type: integer
            format: int64
        - name: commentId
          required: true
          in: path
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/comment"
        "401":
          description: unauthorized
  "/thread/{threadId}/comments/{commentId}/vote":
    post:
      summary: Submit vote on comment (or 0 for thread)
      security:
        - bearerAuth: []
      parameters:
        - name: threadId
          required: true
          in: path
          schema:
            type: integer
            format: int64
        - name: commentId
          required: true
          in: path
          schema:
            type: integer
            format: int64
        - name: vote
          description: "true for upvote, flase for downvote"
          required: true
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: OK
        default:
          description: Failure
  "/thread/{threadId}/comments/{commentId}/delete":
    post:
      summary: Delete own comment
      security:
        - bearerAuth: []
      parameters:
        - name: threadId
          required: true
          in: path
          schema:
            type: integer
            format: int64
        - name: commentId
          required: true
          in: path
          schema:
            type: integer
            format: int64
      responses:
        "401":
          description: unauthorized
        default:
          description: OK
  "/thread/{threadId}/comments/{commentId}/report":
    post:
      summary: Report comment to admins
      security:
        - bearerAuth: []
      parameters:
        - name: threadId
          required: true
          in: path
          schema:
            type: integer
            format: int64
        - name: commentId
          required: true
          in: path
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newReport"
      responses:
        "200":
          description: OK
        default:
          description: failure
  "/thread/{threadId}/comments/{commentId}/children":
    get:
      summary: Get subcomments for this comment
      parameters:
        - name: threadId
          required: true
          in: path
          schema:
            type: integer
            format: int64
        - name: commentId
          required: true
          in: path
          schema:
            type: integer
            format: int64
        - name: level
          description: Maximum level of subcomments
          required: false
          in: query
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/comment"
        "404":
          description: not found
  "/user/{userId}":
    get:
      summary: Get information about a user
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "401":
          description: unauthorized
  "/user/{userId}/comments":
    get:
      summary: Get last comments by a user
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: integer
            format: int64
        - name: top
          in: query
          schema:
            type: integer
          required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/comment"
                    - type: object
                      properties:
                        thread:
                          $ref: "#/components/schemas/thread"
        default:
          description: failure
  /user/me/comments:
    get:
      summary: Get own comments
      security:
        - bearerAuth: []
      parameters:
        - name: top
          in: query
          schema:
            type: integer
          required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/comment"
                    - type: object
                      properties:
                        thread:
                          $ref: "#/components/schemas/thread"
        default:
          description: failure
  /admin/reports:
    get:
      summary: Get reports (only unhandled by default)
      security:
        - bearerAuth: []
      parameters:
        - name: all
          in: query
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/report"
  "/admin/reports/{reportId}":
    post:
      summary: Handle report
      security:
        - bearerAuth: []
      parameters:
        - name: reportId
          required: true
          in: path
          schema:
            type: integer
            format: int64
        - name: action
          description: "decision for report"
          required: true
          in: query
          schema:
            type: string
            enum: [ban, ignore]
      responses:
        "200":
          description: OK
        "401":
          description: unauthorized
        "404":
          description: not found
        default:
          description: failure
  "/admin/ban/{userId}":
    post:
      summary: Ban user for a specific time
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: integer
            format: int64
        - name: time
          description: "Time in seconds, 0 = infinite"
          required: true
          in: query
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                reason:
                  type: string
                until:
                  type: integer
                  format: timestamp
      responses:
        "200":
          description: OK
        "401":
          description: unauthorized
        default:
          description: failure
  /login:
    post:
      summary: login with email address and password
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/login"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  userid:
                    type: number
                    format: int64
                  token:
                    type: string
                    format: byte
        default:
          description: failure
  /register:
    post:
      summary: create a new account
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/register"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/user"
                  - properties:
                      token:
                        type: string
                        format: byte
        default:
          description: failure
  /images/upload:
    post:
      summary: upload a new image with a commentId  (0 = thread) and threadId
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                threadId:
                  type: integer
                  format: int64
                commentId:
                  type: integer
                  format: int64
                image:
                  type: string
                  format: binary
            encoding:
              image:
                contentType: image/png, image/jpeg
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  threadId:
                    type: integer
                    format: int64
                  commentId:
                    type: integer
                    format: int64
                  id:
                    type: integer
                    format: int32
                  url:
                    type: string
        default:
          description: failure
