openapi: "3.0.2"
info:
  title: API Title
  version: "1.0"
servers:
  - url: https://api.server.test/v1

components:
  schemas:
    newThread:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        type:
          type: string
        authorId:
          type: integer
          format: int32
        location:
          $ref: "#/components/schemas/location"
    thread:
      type: object
      allOf:
        - $ref: "#/components/schemas/newThread"
        - properties:
            id:
              type: integer
              format: int32
            votes:
              type: integer
              format: int32

    location:
      type: object
      properties:
        lat:
          type: number
          format: float
        lng:
          type: number
          format: float
    newComment:
      type: object
      properties:
        parentId:
          type: integer
          format: int64
        authorId:
          type: integer
          format: int64
        content:
          type: string
        created_at:
          type: number
          format: timestamp
    comment:
      allOf:
        - $ref: "#/components/schemas/newComment"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
            votes:
              type: integer
              format: int32
    user:
      properties:
        id:
          type: integer
          format: int64
        banned:
          type: boolean
        banUntil:
          description: Banned until (0 = infinite)
          type: integer
          format: timestamp

    newReport:
      properties:
        comment:
          type: object
          $ref: "#/components/schemas/comment"
        userId:
          type: integer
          format: int64
        reason:
          type: string

    report:
      allOf:
        - $ref: "#/components/schemas/newReport"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
            handled:
              type: boolean

paths:
  /threads:
    get:
      summary: Returns threads in a radius around the given position
      parameters:
        - name: lat
          required: true
          in: query
          schema:
            type: number
            format: float
        - name: lng
          required: true
          in: query
          schema:
            type: number
            format: float
        - name: radius
          required: true
          in: query
          schema:
            type: number
            format: float
      responses:
        default:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/thread"

  /thread/{threadId}:
    get:
      summary: Returns thread with given id
      parameters:
        - name: threadId
          required: true
          in: path
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/thread"
        "401":
          description: unauthorized
        "404":
          description: not found

  /thread/:
    post:
      summary: Create new thread
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newThread"
      responses:
        "201":
          description: OK
        "401":
          description: unauthorized

  /thread/{threadId}/comments:
    get:
      summary: Get comments in thread
      parameters:
        - name: threadId
          required: true
          in: path
          schema:
            type: integer
            format: int64
        - name: levels
          required: false
          description: Maximum level of subcomments
          in: query
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/comment"
    post:
      summary: Create new top level comment
      parameters:
        - name: threadId
          required: true
          in: path
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newComment"
      responses:
        "200":
          description: OK
  /thread/{threadId}/comments/{commentId}:
    get:
      summary: Get single comment
      parameters:
        - name: threadId
          required: true
          in: path
          schema:
            type: integer
            format: int64
        - name: commentId
          required: true
          in: path
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/comment"
        "401":
          description: unauthorized

  /thread/{threadId}/comments/{commentId}/vote:
    post:
      summary: Submit vote on comment (or 0 for thread)
      parameters:
        - name: threadId
          required: true
          in: path
          schema:
            type: integer
            format: int64
        - name: commentId
          required: true
          in: path
          schema:
            type: integer
            format: int64
        - name: vote
          description: true for upvote, flase for downvote
          required: true
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: OK
        default:
          description: Failure
  /thread/{threadId}/comments/{commentId}/delete:
    post:
      summary: Delete own comment
      parameters:
        - name: threadId
          required: true
          in: path
          schema:
            type: integer
            format: int64
        - name: commentId
          required: true
          in: path
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: OK
        "401":
          description: unauthorized

  /thread/{threadId}/comments/{commentId}/report:
    post:
      summary: Report comment to admins
      parameters:
        - name: threadId
          required: true
          in: path
          schema:
            type: integer
            format: int64
        - name: commentId
          required: true
          in: path
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newReport"
      responses:
        "200":
          description: OK
        default:
          description: failure

  /thread/{threadId}/comments/{commentId}/children:
    get:
      summary: Get subcomments for this comment
      parameters:
        - name: threadId
          required: true
          in: path
          schema:
            type: integer
            format: int64
        - name: commentId
          required: true
          in: path
          schema:
            type: integer
            format: int64
        - name: level
          description: Maximum level of subcomments
          required: false
          in: query
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/comment"
        "404":
          description: not found

  /user/{userId}:
    get:
      summary: Get information about a user
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: integer
            format: int64

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "401":
          description: unauthorized

  /user/{userId}/comments:
    get:
      summary: Get last comments by a user
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: integer
            format: int64
        - name: top
          in: query
          schema:
            type: integer
          required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/comment"
                    - type: object
                      properties:
                        thread:
                          $ref: "#/components/schemas/thread"
        default:
          description: failure
  /user/me/comments:
    get:
      summary: Get own comments
      parameters:
        - name: top
          in: query
          schema:
            type: integer
          required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/comment"
                    - type: object
                      properties:
                        thread:
                          $ref: "#/components/schemas/thread"
        default:
          description: failure

  /admin/reports:
    get:
      summary: Get reports (only unhandled by default)
      parameters:
        - name: all
          in: query
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/report"
  /admin/reports/{reportId}:
    post:
      summary: Handle report
      parameters:
        - name: reportId
          required: true
          in: path
          schema:
            type: integer
            format: int64
        - name: action
          description: enum (ban, ignore)
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          description: OK
        "401":
          description: unauthorized
        "404":
          description: not found
        default:
          description: failure
  /admin/ban/{userId}:
    post:
      summary: Ban user for a specific time
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: integer
            format: int64
        - name: time
          description: Time in seconds, 0 = infinite
          required: true
          in: query
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                reason:
                  type: string
                until:
                  type: integer
                  format: timestamp
      responses:
        "200":
          description: OK
        "401":
          description: unauthorized
        default:
          description: failure
